"use client"; // Adicione essa linha aqui

import React, { useEffect, useState, useRef } from "react";

const WORDS = [
Â  "REACT","JAVASCRIPT","NEXT","COMPONENTE","ESTADO","PROPS","HOOKS","FUNCTION","ASYNC",
Â  "VARIAVEL","PROGRAMACAO","ALGORITMO","GITHUB","TYPESCRIPT","NODE","FRONTEND","BACKEND",
Â  "ESTILOS","CSS","HTML","DOM","EVENTO","TESTES","DEPLOY","SERVIDOR","CLIENTE","ROTAS",
Â  "BUILD","PACKAGE","NPM","YARN","WEBPACK"
];

const ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");

export default function Home() {
Â  const [word, setWord] = useState(chooseRandomWord);
Â  const [revealed, setRevealed] = useState(new Set());
Â  const [wrong, setWrong] = useState(new Set());
Â  const [maxErrors] = useState(6);
Â  const [status, setStatus] = useState("playing");
Â  const [input, setInput] = useState("");
Â  const inputRef = useRef(null);

Â  useEffect(() => {
Â  Â  evaluateStatus();
Â  Â  if (inputRef.current) inputRef.current.focus();
Â  }, [revealed, wrong]);

Â  function resetGame() {
Â  Â  setWord(chooseRandomWord());
Â  Â  setRevealed(new Set());
Â  Â  setWrong(new Set());
Â  Â  setStatus("playing");
Â  Â  setInput("");
Â  Â  if (inputRef.current) inputRef.current.focus();
Â  }

Â  function handleGuessLetter(letter) {
Â  Â  if (status !== "playing") return;
Â  Â  const L = letter.toUpperCase();
Â  Â  if (revealed.has(L) || wrong.has(L)) return;

Â  Â  if (word.includes(L)) {
Â  Â  Â  const next = new Set(revealed);
Â  Â  Â  for (const ch of word) if (ch === L) next.add(L);
Â  Â  Â  setRevealed(next);
Â  Â  } else {
Â  Â  Â  const nextWrong = new Set(wrong);
Â  Â  Â  nextWrong.add(L);
Â  Â  Â  setWrong(nextWrong);
Â  Â  }
Â  }

Â  function handleSubmit(e) {
Â  Â  e.preventDefault();
Â  Â  const value = input.trim().toUpperCase();
Â  Â  if (!value) return;
Â  Â  const letter = value[0];
Â  Â  if (!/^[A-Z]$/.test(letter)) {
Â  Â  Â  setInput("");
Â  Â  Â  return;
Â  Â  }
Â  Â  handleGuessLetter(letter);
Â  Â  setInput("");
Â  Â  if (inputRef.current) inputRef.current.focus();
Â  }

Â  function evaluateStatus() {
Â  Â  const uniqueLetters = new Set(word.split(""));
Â  Â  const revealedAll = Array.from(uniqueLetters).every(l => revealed.has(l));
Â  Â  if (revealedAll) {
Â  Â  Â  setStatus("won");
Â  Â  Â  return;
Â  Â  }
Â  Â  if (wrong.size >= maxErrors) {
Â  Â  Â  setStatus("lost");
Â  Â  Â  return;
Â  Â  }
Â  Â  setStatus("playing");
Â  }

Â  const attemptsLeft = Math.max(0, maxErrors - wrong.size);

Â  return (
Â  Â  <main style={styles.page}>
Â  Â  Â  <div style={styles.container}>
Â  Â  Â  Â  <h1 style={styles.title}>Jogo da Forca</h1>
Â  Â  Â  Â  <div style={styles.gameArea}>
Â  Â  Â  Â  Â  <div style={styles.hangmanBox}>
Â  Â  Â  Â  Â  Â  <HangmanSVG wrongCount={wrong.size} />
Â  Â  Â  Â  Â  Â  <p style={styles.attempts}>Tentativas restantes: <strong>{attemptsLeft}</strong></p>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div style={styles.panel}>
Â  Â  Â  Â  Â  Â  <p style={styles.label}>Palavra:</p>
Â  Â  Â  Â  Â  Â  <div style={styles.wordDisplay} aria-live="polite">
Â  Â  Â  Â  Â  Â  Â  {Array.from(word).map((ch, idx) => (
Â  Â  Â  Â  Â  Â  Â  Â  <span key={idx} style={styles.letterBox}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {revealed.has(ch) || status === "lost" ? ch : "_"}
Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  <form onSubmit={handleSubmit} style={styles.form}>
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  ref={inputRef}
Â  Â  Â  Â  Â  Â  Â  Â  aria-label="Digite uma letra"
Â  Â  Â  Â  Â  Â  Â  Â  maxLength={1}
Â  Â  Â  Â  Â  Â  Â  Â  value={input}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setInput(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  style={styles.input}
Â  Â  Â  Â  Â  Â  Â  Â  disabled={status !== "playing"}
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <button style={styles.button} type="submit" disabled={status !== "playing"}>Enviar</button>
Â  Â  Â  Â  Â  Â  Â  <button type="button" onClick={resetGame} style={styles.resetButton}>Reiniciar</button>
Â  Â  Â  Â  Â  Â  </form>

Â  Â  Â  Â  Â  Â  <div style={styles.keyboard} aria-hidden={status !== "playing"}>
Â  Â  Â  Â  Â  Â  Â  {ALPHABET.map((L) => {
Â  Â  Â  Â  Â  Â  Â  Â  const used = revealed.has(L) || wrong.has(L);
Â  Â  Â  Â  Â  Â  Â  Â  const isWrong = wrong.has(L);
Â  Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={L}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleGuessLetter(L)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={used || status !== "playing"}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ...styles.key,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ...(used ? (isWrong ? styles.keyWrong : styles.keyCorrect) : {})
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {L}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  <div style={styles.attemptsList}>
Â  Â  Â  Â  Â  Â  Â  <p>Letras tentadas:</p>
Â  Â  Â  Â  Â  Â  Â  <div style={styles.triedBox}>
Â  Â  Â  Â  Â  Â  Â  Â  {Array.from(new Set([...revealed, ...wrong])).length === 0 && <span style={styles.empty}>Nenhuma letra ainda.</span>}
Â  Â  Â  Â  Â  Â  Â  Â  {Array.from(revealed).map(l => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span key={l} style={styles.triedCorrect}>{l}</span>
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  {Array.from(wrong).map(l => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span key={l} style={styles.triedWrong}>{l}</span>
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {status === "won" && (
Â  Â  Â  Â  Â  <div style={styles.overlay}>
Â  Â  Â  Â  Â  Â  <div style={styles.modal}>
Â  Â  Â  Â  Â  Â  Â  <h2>ParabÃ©ns! VocÃª venceu ðŸŽ‰</h2>
Â  Â  Â  Â  Â  Â  Â  <p>A palavra era <strong>{word}</strong></p>
Â  Â  Â  Â  Â  Â  Â  <button onClick={resetGame} style={styles.button}>Jogar novamente</button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}

Â  Â  Â  Â  {status === "lost" && (
Â  Â  Â  Â  Â  <div style={styles.overlay}>
Â  Â  Â  Â  Â  Â  <div style={styles.modal}>
Â  Â  Â  Â  Â  Â  Â  <h2>Fim de jogo ðŸ˜ž</h2>
Â  Â  Â  Â  Â  Â  Â  <p>A palavra era <strong>{word}</strong></p>
Â  Â  Â  Â  Â  Â  Â  <button onClick={resetGame} style={styles.button}>Tentar outra</button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}

Â  Â  Â  Â  <footer style={styles.footer}>Dica: use o teclado virtual ou digite uma letra e pressione Enviar.</footer>
Â  Â  Â  </div>
Â  Â  </main>
Â  );
}

function chooseRandomWord() {
Â  const w = WORDS[Math.floor(Math.random() * WORDS.length)].toUpperCase();
Â  return w.replace(/[^A-Z]/g, "");
}

function HangmanSVG({ wrongCount }) {
Â  return (
Â  Â  <svg width="220" height="260" viewBox="0 0 220 260" style={{display:'block'}} aria-hidden>
Â  Â  Â  <line x1="20" y1="240" x2="200" y2="240" stroke="#222" strokeWidth="6" />
Â  Â  Â  <line x1="60" y1="240" x2="60" y2="20" stroke="#222" strokeWidth="6" />
Â  Â  Â  <line x1="60" y1="20" x2="150" y2="20" stroke="#222" strokeWidth="6" />
Â  Â  Â  <line x1="150" y1="20" x2="150" y2="40" stroke="#222" strokeWidth="6" />
Â  Â  Â  {wrongCount > 0 && <circle cx="150" cy="60" r="18" stroke="#222" strokeWidth="4" fill="none" />}
Â  Â  Â  {wrongCount > 1 && <line x1="150" y1="78" x2="150" y2="140" stroke="#222" strokeWidth="4" />}
Â  Â  Â  {wrongCount > 2 && <line x1="150" y1="95" x2="125" y2="115" stroke="#222" strokeWidth="4" />}
Â  Â  Â  {wrongCount > 3 && <line x1="150" y1="95" x2="175" y2="115" stroke="#222" strokeWidth="4" />}
Â  Â  Â  {wrongCount > 4 && <line x1="150" y1="140" x2="130" y2="180" stroke="#222" strokeWidth="4" />}
Â  Â  Â  {wrongCount > 5 && <line x1="150" y1="140" x2="170" y2="180" stroke="#222" strokeWidth="4" />}
Â  Â  </svg>
Â  );
}

const styles = {
Â  page: { minHeight: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center', background: 'linear-gradient(180deg,#0f1724,#071028)', color: '#e6eef8', padding: '24px' },
Â  container: { width: '100%', maxWidth: '1100px', background: 'linear-gradient(180deg, rgba(255,255,255,0.03), rgba(255,255,255,0.01))', borderRadius: '12px', boxShadow: '0 8px 30px rgba(2,6,23,0.7)', padding: '24px' },
Â  title: { margin: 0, padding: 0, fontSize: '28px', fontWeight: 700, color: '#ffd166' },
Â  gameArea: { display: 'flex', gap: '20px', marginTop: '18px' },
Â  hangmanBox: { flex: '0 0 260px', textAlign: 'center', padding: '10px' },
Â  panel: { flex: 1, padding: '8px' },
Â  label: { margin: 0, color: '#94a3b8' },
Â  wordDisplay: { display: 'flex', gap: '10px', padding: '12px 0', flexWrap: 'wrap' },
Â  letterBox: { display: 'inline-block', minWidth: '28px', borderBottom: '2px solid #2b6cb0', textAlign: 'center', fontSize: '20px', padding: '6px 2px' },
Â  form: { display: 'flex', gap: '8px', alignItems: 'center', marginTop: '8px' },
Â  input: { width: '56px', padding: '8px', fontSize: '18px', borderRadius: '6px', border: '1px solid #2b6cb0', background: 'transparent', color: '#e6eef8' },
Â  button: { padding: '8px 12px', borderRadius: '8px', border: 'none', cursor: 'pointer', background: '#06b6d4', color: '#062024', fontWeight: 700 },
Â  resetButton: { padding: '8px 12px', borderRadius: '8px', border: '1px solid #334155', background: 'transparent', color: '#ffd166', cursor: 'pointer' },
Â  keyboard: { marginTop: '14px', display: 'grid', gridTemplateColumns: 'repeat(13,1fr)', gap: '8px' },
Â  key: { padding: '8px', borderRadius: '6px', border: '1px solid #334155', background: 'transparent', color: '#e6eef8', cursor: 'pointer' },
Â  keyCorrect: { background: '#16a34a', color: '#062020', border: 'none' },
Â  keyWrong: { background: '#ef4444', color: '#fff', border: 'none' },
Â  attempts: { marginTop: '8px', color: '#94a3b8' },
Â  attemptsList: { marginTop: '14px' },
Â  triedBox: { display: 'flex', gap: '8px', flexWrap: 'wrap', marginTop: '8px' },
Â  triedCorrect: { padding: '6px 8px', borderRadius: '6px', background: '#064e3b', color: '#a7f3d0', fontWeight: 700 },
Â  triedWrong: { padding: '6px 8px', borderRadius: '6px', background: '#7f1d1d', color: '#fecaca', fontWeight: 700 },
Â  empty: { color: '#94a3b8' },
Â  overlay: { position: 'fixed', inset: 0, display: 'flex', alignItems: 'center', justifyContent: 'center', background: 'rgba(0,0,0,0.6)' },
Â  modal: { background: '#011627', padding: '24px', borderRadius: '12px', textAlign: 'center', color: '#fff', minWidth: '320px' },
Â  footer: { marginTop: '12px', color: '#94a3b8', textAlign: 'center' }
};